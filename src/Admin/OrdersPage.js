import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Swal from 'sweetalert2';
import './OrdersPage.css';
const api = process.env.REACT_APP_API_URL;

function OrdersPage() {
  const [orders, setOrders] = useState([]);

  useEffect(() => {
    axios.get(`${api}/api/admin/orders`)

      .then(response => setOrders(response.data))
      .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error));
  }, []);

  const handleStatusChange = (orderId, newStatus) => {
  axios.post(`${api}/api/admin/orders/${orderId}/status`, { status: newStatus })

      .then(() => {
        setOrders(prev =>
          prev.map(order =>
            order.id === orderId ? { ...order, delivery_status: newStatus } : order
          )
        );
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏');
      });
  };

  const sendInvoice = (orderId) => {
   axios.post(`${api}/api/admin/orders/${orderId}/send-invoice`)

      .then(() => {
        Swal.fire({
          title: '‚úÖ –£—Å–ø–µ—à–Ω–æ!',
          text: '–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.',
          icon: 'success',
          background: '#1a1a2e',
          color: '#fff',
          confirmButtonColor: '#00c8ff'
        });
      })
      .catch((err) => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:', err);
        Swal.fire({
          title: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫',
          text: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMTP –∏–ª–∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.',
          icon: 'error',
          background: '#1a1a2e',
          color: '#fff',
          confirmButtonColor: '#ff4d4f'
        });
      });
  };

const handleReportClick = async () => {
  const { value: formValues } = await Swal.fire({
    title: '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç',
    html: `
      <input type="date" id="start-date" class="swal2-input" placeholder="–î–∞—Ç–∞ —Å">
      <input type="date" id="end-date" class="swal2-input" placeholder="–î–∞—Ç–∞ –ø–æ">
      <select id="status" class="swal2-select" style="padding: 10px; border-radius: 6px; margin-top: 10px;">
        <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
        <option value="–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏">–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</option>
        <option value="–í –ø—É—Ç–∏">–í –ø—É—Ç–∏</option>
        <option value="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</option>
      </select>
    `,
    focusConfirm: false,
    confirmButtonText: '–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç',
    confirmButtonColor: '#00c8ff',
    background: '#1a1a2e',
    color: '#fff',
    preConfirm: () => {
      const start = document.getElementById('start-date').value;
      const end = document.getElementById('end-date').value;
      const status = document.getElementById('status').value;

      if (!start || !end) {
        Swal.showValidationMessage('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã');
        return false;
      }

      return { start, end, status };
    }
  });

  if (formValues) {
    try {
      const { start, end, status } = formValues;

      const res = await axios.post(`${api}/api/admin/generate-report`, {
        from: start,
        to: end,
        status: status || null // –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º null
      }, { responseType: 'blob' });

      const blob = new Blob([res.data], {
        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
      });

      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `–û—Ç—á—ë—Ç_${start}_–¥–æ_${end}${status ? `_(${status})` : ''}.docx`;
      document.body.appendChild(a);
      a.click();
      a.remove();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞:', err);
      Swal.fire({
        title: '–û—à–∏–±–∫–∞!',
        text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç.',
        icon: 'error',
        background: '#1a1a2e',
        color: '#fff',
        confirmButtonColor: '#ff4d4f'
      });
    }
  }
};

  return (
    <div className="orders-container">
      <h2 className="orders-title">–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</h2>

      <div className="report-button-container">
        <button className="report-button" onClick={handleReportClick}>
          üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç
        </button>
      </div>

      <table className="orders-table">
        <thead>
          <tr>
            <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
            <th>–î–∞—Ç–∞</th>
            <th>–°—É–º–º–∞</th>
            <th>–¢–æ–≤–∞—Ä—ã</th>
            <th>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏</th>
            <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
          </tr>
        </thead>
        <tbody>
          {orders.map(order => (
            <tr key={order.id}>
              <td>{order.user_email}</td>
              <td>{new Date(order.created_at).toLocaleString()}</td>
              <td>{order.total_price} ‚ÇΩ</td>
              <td>
                {order.products.map((product, idx) => (
                  <div key={idx}>
                    {product.name} ‚Äî {product.price} ‚ÇΩ
                  </div>
                ))}
              </td>
              <td>
                <select
                  className={`status-select ${
                    order.delivery_status === '–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏' ? 'status-awaiting' :
                    order.delivery_status === '–í –ø—É—Ç–∏' ? 'status-shipping' :
                    order.delivery_status === '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' ? 'status-delivered' : ''
                  }`}
                  value={order.delivery_status}
                  onChange={(e) => handleStatusChange(order.id, e.target.value)}
                >
                  <option value="–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏">‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</option>
                  <option value="–í –ø—É—Ç–∏">üöö –í –ø—É—Ç–∏</option>
                  <option value="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ">‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</option>
                </select>
              </td>
              <td>
                <button className="send-invoice-btn" onClick={() => sendInvoice(order.id)}>
                  üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default OrdersPage;
